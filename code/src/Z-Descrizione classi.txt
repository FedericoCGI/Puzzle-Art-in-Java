AssegnazioneFotoComponent --> crea un pannello in cui viene disegnata la griglia e le immagini con coordinate spaziali randomizzate.
                              Tale classe contiene la classe Muovi_Immagine che permette di spostare le immagini nel frame e nella griglia nella giusta posizione.
			      La classe Muovi_immagine contiene l'istruzione per passare ai livelli successivi.


			     BREVE DESCRIZIONE DELL'ALGORITMO CHE GENERA IL PANNELLO CHE CONTIENE GRIGLIA E IMMAGINI
                            
                             La classe AssegnazioneFotoComponent crea un pannello contenente la griglia "scheletro" su cui posizionare le immagini per ricostruire la foto completa e le varie parti sparpagliate dell'immagine.
                             Viene creata una griglia nxn (matrice nxn di rettangoli di tipo Rectangle2D.Double), la quale viene disegnata sul pannello con il paint component.
			     Da tale griglia si estrapolano poi i vari elementi (rettangoli) che la costituiscono e si crea un array griglia (contenente i vari rettangoli/sezioni che costituiscono la griglia scheletro su cui riscostruire l'immagine).
			     Si ricrea un altra griglia nxn di rettangoli di tipo Rectangle2D.Double e da essa si estrapola un array di rettangoli che , in seguito, conterranno le immagini relative alle parti della foto da ricostruire.
                             Gli elementi (rettangoli) di questo array vengono ,poi, inseriti in un array list. (sia nell array di rettangoli, che nell'arraylist i rettangoli sono ordinati in modo sequenziali, ovvero alla posizione 0 troviamo il rettangolo 1, alla posizione 1 , il rettangolo 2 e cosi via..)
			     Si passa ad associare al rettangolo 1 la parte 1 dell'immagine, al rettangolo 2 la parte 2 e cosi via tramite il metodo drawImage del paint component. L'immagine avra le stesse coordinate e le stesse dimensioni del rettangolo a cui fa riferimento. Ecco perche' i rettangoli sono stati ordinati in modo sequenziali nell'array e nell'arraylist, in modo tale che l'assegnazione delle foto potesse risultare facile.Una volta associate le immagini, in uno step successivo, si potra' randomizzare la posizione delle varie parti dell'immagine da ricostruire.
			     Inserire tali rettangoli in un array list serve per poter lanciare lo shuffle, che ramndomizzera' le posizioni dei vari rettangoli all'interno dell'arraylist. Dopo lo shuffle, cio' che cambia sono solo le POSIZIONI DEI RETTANGOLI ALL'INTERNO DELL'ARRAYLIST, mentre LE COORDINATE SPAZIALI DEI RETTANGOLI RIMANGONO LE MEDESIME.
			     Attraverso il metodo ordinaGriglia(ArrayList list) , gli elementi dell'arraylist vengono  ordinati in una griglia nxn ( ovvero il primo elemento dell'arraylist [alla posizione 0] sara inserito nella posizione 0,0 della griglia, il secondo elemento dell'array list [alla poszione 1] sara' inserito nella posizione 0,1 nella griglia e cosi via, fino a riempire tutte le righe e colonne della griglia.[ovviamente alla posizione 0 dell'array list non ci sara' piu il rettangolo 1 ma un altro rettangolo poiche' e' stato lanciato lo shuffle.) . Questa volta le coordinate nello spazio dei vari rettangoli vengono modifcate.
                             Ed ecco che si possono ottenere le parti dell'immagine in modo sparpagliato e casuale. 

CardViewer --> crea una label contenente l'immagine da visualizzare che sara' contenuta nel frame che si aprira' al click sul tasto "View Image".
Cronometro --> imposta il tempo di gioco disponibile per ogni livello.
GrigliaFotoComponent -- > crea un array bidimensionale di tipo Rectangle2D.Double, ovvero crea una griglia di rettangoli (senza stmaparla su schermo, crea solamente una grigia di elementi).
Importa_Immagine --> permette di importare un'immagine all'interno di una classe.
PressPlayAction --> descrive le azioni che saranno svolte quando verra' premuto il tasto play.
                    In particolare crea la schermata relativa al primo livello.
PuzzleArt --> crea un frame relativo alla schermata "home", "intro" e avvia il gioco. E' la classe in cui e' contenuto il main.
ViewerAction --> descrive le azioni che saranno svolte quando verra' premuto il tastro "View Image".
                 In particolare apre una finestra in cui viene mostrata l'immagine da ricostruire.

Congratulation --> crea la schermata per la chiusura del gioco, dove la cpu si congratula con il gocatore per aver completato i livelli.
SecondoLivello --> contiene i dati per caricare il secondo livello del gioco.
TerzoLivello --> contiene i dati per caricare il terzo livello del gioco.
TutorialAction --> mostra il tutorial al click sul bottone "Tutorial".
Importa_Audio --> permette di importare un audio.
Z-Descrizione classi --> documento in cui e' inserita una breve descrizione riguardo alle classi create per sviluppare il progetto/gioco "Puzzle Art!" e la loro funzione.
